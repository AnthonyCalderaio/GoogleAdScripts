//Requirements:
//				1) In the top right hand corner where the script code is, click "ADVANCED APIS" and check "Analytics"
//				2) Then visit this sight and enable the API for the specific script that you wish to run: "https://console.developers.google.com/project/1058815990865/apiui/api?authuser=0" Hint: you can also find this link at the bottom of "ADVANCED APIS"
//				3) Authorize google ads to run this script




function main() {
  
  //We want to know the amount of days in each month to know where to count down from when we reach the bottom of the previous month
  //* - This will probably be obselete by the time you read it but leave it just incase.
  var daysInJan = 31;
  var daysInFeb = 28;
  var daysInMar = 31;
  var daysInApr = 30;
  var daysInMay = 31;
  var daysInJun = 30;
  var daysInJul = 31;
  var daysInAug = 31;
  var daysInSep = 31;
  var daysInOct = 31;
  var daysInNov = 30;
  var daysInDec = 31;
  
  //Keeping track of the times pushe to a given array. 
  //* - Probably for testing purposes
  var weekdayPushCounter = 0;
  var weekendPushCounter = 0;
  
  
  //ANALYTICS - Helper function
  function listAllProfiles() {
    
    //!Sensitive
  	var accountId = 'xxxx';
    
    //!Sensitive
  	var webPropertyId = 'xxxx';
    
    
  	var profiles = Analytics.Management.Profiles.list(accountId, webPropertyId);
  	for (var i = 0; i < profiles.items.length; i++) {
    	Logger.log('Profile ID: %s, Name: %s', profiles.items[i].id,
        profiles.items[i].name);
  	}
  }
  
  //Cal the function listAllProfiles()
  listAllProfiles()
  
  //Fri Dec 07 11:47:12 GMT-08:00 2018
  var today = new Date();
  //Logger.log(today)
  var inverted = false;
  
  //Should return 4 digit year Var
  var todayYearVar = today.toString().slice(10,15);
  
  //Should return 2 digit month variable(01-12)
  var todayMonthVar = today.toString().slice(4,7);
  
  //Should return 2 digit day var 01-31
  var todayDayVar = today.toString().slice(8,10);
  
  //For some reason have another year var
//->> Take a look at this
  var yearVar = today.toString().slice(10,15);
//->> Take a look at this
  
  //Logging the year var 
  //* - probably for testing purposes
  Logger.log("yearVar"+yearVar)
  
  //Another month var?!?!
//->> Take a look at this
  var monthVar = today.toString().slice(4,7);
//->> Take a look at this
  
  //Logging the month var 
  //* - probably for testing purposes
  Logger.log("monthVar: "+monthVar)
  var dayVar = today.toString().slice(8,10);
  Logger.log("dayVar: "+dayVar)
  dayVar = Number(dayVar);
  
  var monthDigit = "";
  
  //Set the initial month
  if (monthVar === "Jan"){
  	monthDigit = 2;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "Feb"){
  	monthDigit = 3;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "Mar"){
  	monthDigit = 4;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "Apr"){
  	monthDigit = 5;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "May"){
  	monthDigit = 6;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "Jun"){
  	monthDigit = 7;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "July"){
  	monthDigit = 8;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "Aug"){
  	monthDigit = 9;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "Sep"){
  	monthDigit = 10;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "Oct"){
  	monthDigit = 11;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "Nov"){
  	monthDigit = 12;
    Logger.log("Month Digit: "+monthDigit);
  } 
  if (monthVar === "Dec"){
  	monthDigit = 13;
    Logger.log("Month Digit: "+monthDigit);
  } 
  
  
  var newStartDay ="";
  var newStartMonth ="";
  
  //Month variable
  var month ="";

  
  
  
  var daysLeft = (dayVar - 30);
  
  Logger.log("daysLeft:  "+daysLeft)
  
  //Establish a new start month which is the start date of our data
  if (monthDigit === 1){
  	newStartMonth = 12;
  }
  if (monthDigit > 1){
  newStartMonth = (Number(monthDigit)) -1;
  }
  Logger.log("New Start Month: "+newStartMonth)
    
  //try{
  
  //}
  //catch(e){
  
  //}
  
  //!!!!! Remember to keep in mind that on instances like March 31, the new start date will be Feb 31 and there is no Feb 31
  //Well cross this bridge when we come to it
  //New start day is this day last month
  
  
  
  newStartDay = dayVar-1;
  
  //if (newStartDay<10){
    	//newStartDay = "0".concat(newStartDay)
    //}
  
  ///////////Construction
 
  ///////////Construction
  
  //Deleted section here
  //ok
  
  
  //Deleted section here
  
  //var startDate = "20180800"
  //var terminationDate = "20181203"
  var startDate = yearVar +"0"+ newStartMonth + newStartDay
  Logger.log("New Start date: "+startDate)
  var terminationDate = todayYearVar+"0"+monthDigit+todayDayVar
  Logger.log("Termination Date: "+terminationDate)
  //If you dont state what the first day of the month is, the first iteration won't push to the array and youll be left with a 1-off output.
  var theWeekDay = "Wed"
  
  
  var counter = 0;
  
  //Logger.log("\""+startDatee+"\"")  
  //EndDate
  
  var weekdayArray = []
  var weekendArray = []
  
  var thirtyDayImpCumm = 0;
  var thirtyDayClickCumm = 0;
  
  var weekendClickCumm = 0;
  var weekdayClickCumm = 0;
  
  var weekendImpCumm = 0;
  var weekdayImpCumm = 0;
  
  
  var recordedAdwordsStart = startDate;
  var recordedAdwordsEnd = terminationDate;
 //==================================================================================
            //While  
              //while(startDate != terminationDate){
  			while(startDate != 20181125){
                var woleDayImpCumm = []
  				var wholeDayClickCumm = []
                var wholeDayCtrCumm = []
                var dayGroupCounter = 0;
                if (startDate.trim() === terminationDate.trim()){
                    break;
                }
                if (counter >30){
                    Logger.log("There is a bug somewhere");
                    break;
                }
              //var month ="August";
              //UNCOMMENT THIS
              //Logger.log("weekday: "+theWeekDay)
                //Checks the day of the week today
              //var now = new Date();
              //var stringNow = now.toString()
              //var theWeekDay = stringNow.slice(0,3)

              if (newStartMonth === 1){
                month = "January"
              } 
              if (newStartMonth === 2){
                month = "February"
              } 
              if (newStartMonth === 3){
                month = "March"  
              } 
              if (newStartMonth === 4){
                month = "April"
              } 
              if (newStartMonth === 5){
                month = "May"
              } 
              if (newStartMonth === 6){
                month = "June"
              } 
              if (newStartMonth === 7){
                month = "July"
              } 
              if (newStartMonth === 8){
                month = "August"
              } 
              if (newStartMonth === 9){
                month = "September"
              } 
              if (newStartMonth === 10){
                month = "October"
              } 
              if (newStartMonth === 11){
                month = "November"
              } 
              if (newStartMonth === 12){
                month = "December"
              } 

              //Logger.log(date)
              //var today = Utilities.formatDate(now, timeZone, 'yyyyMMdd');var today = Utilities.formatDate(now, timeZone, 'yyyyMMdd');


               //if ( (theWeekDay === "Mon") || (theWeekDay === "Tue") || (theWeekDay === "Wed") || (theWeekDay === "Thu") || (theWeekDay === "Fri") ){
                //Logger.log("Weekday: Today is: "+theWeekDay)
                  //Logger.log("weekDAY")

               //}

             //if ( (theWeekDay === "Sat") || (theWeekDay === "Sun")  ){
                //Logger.log("weekEND")
                //Logger.log("Weekend: Today is: "+theWeekDay)


              //}

                //Do these at the end
                //Exhaust January
                if( startDate === "20180131"){
                    month = "February"
                    startDate = "20180200";
                  	newStartMonth = 2;
                }
                //Exhaust Feburary
                if( startDate === "20180228"){
                    month = "March"
                    startDate = "20180300";
                  	newStartMonth = 3;
                }
                //Exhaust March
                if( startDate === "20180331"){
                    month = "April"
                    startDate = "20180400";
                  	newStartMonth = 4;
                }
                //Exhaust April
                if( startDate === "20180430"){
                    month = "May"
                    startDate = "20180500";
                  	newStartMonth = 5;
                }
                //Exhaust May
                if( startDate === "20180531"){
                    month = "June"
                    startDate = "20180600";
                  	newStartMonth = 6;
                }
                //Exhaust June
                if( startDate === "20180630"){
                    month = "July"
                    startDate = "20180700";
                  	newStartMonth = 7;
                }
                //Exhaust July
                if( startDate === "20180731"){
                    month = "August"
                    startDate = "20180800";
                  	newStartMonth = 8;
                }
                //Exhaust August
                if( startDate === "20180831"){
                    month = "September"
                    startDate = "20180900";
                  	newStartMonth = 9;
                }
                //Exhaust Sept
                if( startDate === "20180930"){
                    month = "October"
                    startDate = "20181000";
                  	newStartMonth = 10;
                }
                //Exhaust Oct
                if( startDate === "20181031"){
                    month = "November"
                    startDate = "20181100";
                  	newStartMonth = 11;
                }
                //Exhaust Nov
                if( startDate === "20181130"){
                    month = "December"
                    startDate = "20181200";
                    newStartMonth = 12;
                }
                //Exhaust Dec
                if( startDate === "20181231"){
                    month = "January"
                    startDate = "20180100";
                    newStartMonth = 1;
                }
                
                
                startDate = (Number(startDate))+1;
                
                
                startDate = startDate.toString();
                var startDateInput = "\""+startDate+"\"";
                //var we = '\''+${month}+' '+${startDate.toString().slice(6,8)}+'\,'+' '+${startDate.toString().slice(0,4)}+' 10:00:00 -0800'+'\'';
                //Test now
                //var date1 = new Date(we)

                var date2 = new Date();
                //Logger.log(date2)
                //Logger.log(date2)
                //Logger.log(date1)
                //Logger.log(date2)
                //Logger.log(date2)
                //Logger.log('January 02, 2018 10:00:00 -0800')
                //Logger.log(month+' '+startDate.toString().slice(6,8)+'\,'+' '+startDate.toString().slice(0,4)+' 10:00:00 -0800')
                //Logger.log('January 02, 2018 10:00:00 -0800' === month+' '+startDate.toString().slice(6,8)+'\,'+' '+startDate.toString().slice(0,4)+' 10:00:00 -0800')
                //var date1 = new Date('January 02, 2018 10:00:00 -0800')
                var date2 = new Date(month+' '+startDate.toString().slice(6,8)+'\,'+' '+startDate.toString().slice(0,4)+' 10:00:00 -0800')
                //UNCOMMENT THIS
                Logger.log("Date 2 before proccessing:  "+month+' '+startDate.toString().slice(6,8)+'\,'+' '+startDate.toString().slice(0,4)+' 10:00:00 -0800')
                Logger.log ("date2: "+date2)
                //var weekdayThreeLetters = date2.toString().slice(0,3)
                //Logger.log(date2)
                //Logger.log(month.toString().trim())

                //Logger.log(startDateInput.trim())
                //UNCOMMENT THIS
                  Logger.log("Startday: "+startDate)
                var campaigns = AdWordsApp.campaigns().forDateRange(startDate,startDate).withCondition("Status = 'ENABLED'").get();
                theWeekDay = date2.toString().slice(0,3)
            //While 
                var tempTotal = 0;
                while(campaigns.hasNext()){
                  
                    var campaignObject = campaigns.next();
                    var stats = campaignObject.getStatsFor(startDate,startDate)
                    //UNCOMMENT THIS
                    Logger.log(month+": "+startDate.slice(6,8)+" ctr was: ---------"+(stats.getCtr()*100).toFixed(2)+" on ------------"+"--------Campaign: "+campaignObject.getName())
                    ////////
                    if ( (theWeekDay === "Mon") || (theWeekDay === "Tue") || (theWeekDay === "Wed") || (theWeekDay === "Thu") || (theWeekDay === "Fri") ){
                            //weekdayArray.push((stats.getCtr()*100).toFixed(2))
                            //UNCOMMENT THIS
                            Logger.log("Weekday: "+theWeekDay+".  Pushed: "+(stats.getCtr()*100).toFixed(2)+" to weekDAY")
                            weekdayPushCounter++;
                      woleDayImpCumm.push(stats.getImpressions())
  					  wholeDayClickCumm.push(stats.getClicks())
                      wholeDayCtrCumm.push((stats.getCtr()*100).toFixed(2))
                      
                      
                      
                      dayGroupCounter++;

                    }
                    Logger.log("-----------------///-----------------")
                    if ( (theWeekDay === "Sat") || (theWeekDay === "Sun")  ){
                           //weekendArray.push((stats.getCtr()*100).toFixed(2))

                           //UNCOMMENT THIS      
                           Logger.log("Pushed: "+(stats.getCtr()*100).toFixed(2)+" to weekEND")
                          weekendPushCounter++;
                      woleDayImpCumm.push(stats.getImpressions())
  					  wholeDayClickCumm.push(stats.getClicks())
                      wholeDayCtrCumm.push((stats.getCtr()*100).toFixed(2))
                      
                      
                      dayGroupCounter++;
                        }
                  /////////
                }
                //While
                var wholeDayCtr = 0;
                var wholeDayImp = 0;
                var wholeDayClick = 0;
                
                    if ( (theWeekDay === "Sat") || (theWeekDay === "Sun")  ){
                      
                      for (var i = 0; i <wholeDayCtrCumm.length; i++) {
                        tempTotal++;
                        //wholeDayCtr = parseFloat(wholeDayCtr) + parseFloat(wholeDayCtrCumm[i]);
                        wholeDayImp= parseFloat(wholeDayImp) + parseFloat(woleDayImpCumm[i])
                        wholeDayClick= parseFloat(wholeDayClick) + parseFloat(wholeDayClickCumm[i])
                        
                        
                        Logger.log("Whole day ctr: "+wholeDayCtr)
                       
                        Logger.log("Campaign: "+campaignObject.getName()+".. and wholeDayCtrCumm: "+wholeDayCtrCumm[i])
                        }
                    Logger.log("Temp Total: "+tempTotal);
                    Logger.log("Day Group Counter: "+dayGroupCounter)
					//Logger.log("This Days CTR: "+parseFloat(parseFloat(wholeDayCtr)/tempTotal))
                    Logger.log("This Days Clicks: "+parseFloat(wholeDayClick))
                    Logger.log("This Days Clicks: "+parseFloat(wholeDayImp))
                    Logger.log("This Days Ctr: "+((parseFloat(parseFloat(wholeDayClick))/parseFloat(wholeDayImp))*100))
                      
                    thirtyDayImpCumm = thirtyDayImpCumm + wholeDayImp;
  					thirtyDayClickCumm = thirtyDayClickCumm + wholeDayClick;
                      
                    weekendClickCumm = weekendClickCumm + wholeDayClick;
                    weekendImpCumm = weekendImpCumm + wholeDayImp;
                    weekendArray.push(tempTotal/dayGroupCounter)
                    }

                    if ( (theWeekDay === "Mon") || (theWeekDay === "Tue") || (theWeekDay === "Wed") || (theWeekDay === "Thu") || (theWeekDay === "Fri") ){

                     
                      for (var i = 0; i <wholeDayCtrCumm.length; i++) {
                        tempTotal= parseFloat(tempTotal) + parseFloat(wholeDayCtrCumm[i]);
                        wholeDayImp= parseFloat(wholeDayImp) + parseFloat(woleDayImpCumm[i])
                        wholeDayClick= parseFloat(wholeDayClick) + parseFloat(wholeDayClickCumm[i])
                        
                        }
					Logger.log("This Days CTR: "+tempTotal/dayGroupCounter)
                    weekendArray.push(tempTotal/dayGroupCounter)
                      
                    thirtyDayImpCumm = thirtyDayImpCumm + wholeDayImp;
  					thirtyDayClickCumm = thirtyDayClickCumm + wholeDayClick;
                      
                    weekdayClickCumm = weekdayClickCumm +  wholeDayClick;
                    weekdayImpCumm = weekdayImpCumm + wholeDayImp;
                    }

                    theWeekDay = date2.toString().slice(0,3)


                    //Logger.log("\'"+month+" "+startDate.toString().slice(6,8)+"\, "+startDate.toString().slice(0,4)+" 13:00:00 -0500"+"\'")
                    //Logger.log(month+": "+startDate.slice(6,8))


                    Logger.log("New Day!")
                    Logger.log("New Day!")	
                    Logger.log("New Day!")	
                    Logger.log("New Day!")	
                    counter++;
                  } 
//First While 
//////////////////////////////////////////////////////////////////////////////////////
  
  
  
  Logger.log("Weekday Array: "+weekdayArray)
  //Logger.log("Weekday length: " +((weekdayArray.length)  )        )
  //Logger.log("Weekend length: " +((weekendArray.length)  )        )
  
  
  //Weekday CTR average
  var weekdayCtrCumm = 0;
  weekdayCtrCumm = parseFloat(weekdayCtrCumm);
  
  
  
  var j;
  for(j = 0; j<weekdayArray.length ;j++){
  	weekdayCtrCumm = parseFloat(weekdayCtrCumm) + parseFloat(weekdayArray[j]);
  }
  
  
  
  
  var weekdayCTRAverage = weekdayCtrCumm / weekdayPushCounter
  Logger.log("Weekday CTR Average: "+weekdayCTRAverage.toFixed(3)+": weekdayCtrCumm: "+parseFloat(weekdayCtrCumm)+"   And length: "+weekdayArray.length);
  
  
  
  
  
  
  
  
  
  //Weekend CTR average
  var weekendCtrCumm = 0;
  weekendCtrCumm = parseFloat(weekendCtrCumm);
  
  
  var k;
  for(k = 0; k<weekendArray.length ;k++){
    //Logger.log("parseFloat(weekendArray[k]"+parseFloat(weekendArray[k]))
  	weekendCtrCumm = parseFloat(weekendCtrCumm) + parseFloat(weekendArray[k]);
  }
  
  
  
  
  var weekendCTRAverage = weekendCtrCumm / weekendPushCounter
  //Logger.log("Weekend Ctr cumm: "+weekendCtrCumm+"   weekend array length: "+weekendArray.length+"  weekendArray:" + weekendArray)
  Logger.log("Weekend CTR Average: "+weekendCTRAverage.toFixed(3));
  
  
  Logger.log("Days sampled: "+counter);
  
  
  Logger.log("Overall Impressions: "+thirtyDayImpCumm);
  Logger.log("Overall Clicks: "+thirtyDayClickCumm);
  var cummCtr = ((thirtyDayClickCumm/thirtyDayImpCumm)*100).toFixed(2)
  Logger.log("Overall CTR: "+cummCtr+"%")
  
  Logger.log("WeekEnd Clicks Cumm: "+weekendClickCumm)
  Logger.log("WeekEnd Imp Cumm: "   +weekendImpCumm)
  
  Logger.log("WeekDay Clicks Cumm: "+weekdayClickCumm)
  Logger.log("WeekDay Imp Cumm: "   +weekdayImpCumm)
  
  var stats = AdWordsApp.currentAccount().getStatsFor("LAST_30_DAYS");
  
  
  function filterStats() {
  	var profileId = '138359559';
    var thisMonthDynamicStartDate = '30daysAgo'
    Logger.log(thisMonthDynamicStartDate+"-- Should exactly match --"+"2018-12-01")
    //if (todayDayVar==="10"){
    //	todayDayVar = 09
    //}
    //if (todayDayVar < 10){
    //	todayDayVar = "0"+(todayDayVar-1)
    //}
    //if (todayDayVar >10){
    //	todayDayVar = (todayDayVar-1)
    //}
  	var thisMonthDynamicEndDate = 'yesterday'
    Logger.log(thisMonthDynamicEndDate  +"-- Should exactly match --"+"2018-12-01")
    var results = Analytics.Data.Ga.get(
      'ga:' + profileId,
      thisMonthDynamicStartDate,  // Start date in yyyy-mm-dd format.
      thisMonthDynamicEndDate,  // End date in yyyy-mm-dd format.
      'ga:sessions', // List of all metrics to retrieve.
      //'ga:Users
      {
        // Filter for Firefox browser users in the USA. See
        // https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters
        // for filter syntax, and
        // https://developers.google.com/analytics/devguides/reporting/core/dimsmets
        // for the list of supported Dimensions and Metrics.
        //'filters': 'ga:browser==Firefox;ga:country==United States'
      }
  );
    
    var users = Analytics.Data.Ga.get(
      'ga:' + profileId,
      thisMonthDynamicStartDate,  // Start date in yyyy-mm-dd format.
      thisMonthDynamicEndDate,  // End date in yyyy-mm-dd format.
      'ga:users', // List of all metrics to retrieve.
      //'ga:Users
      {
        // Filter for Firefox browser users in the USA. See
        // https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters
        // for filter syntax, and
        // https://developers.google.com/analytics/devguides/reporting/core/dimsmets
        // for the list of supported Dimensions and Metrics.
        //'filters': 'ga:browser==Firefox;ga:country==United States'
      }
  );
    
    
    var newUsers = Analytics.Data.Ga.get(
      'ga:' + profileId,
       thisMonthDynamicStartDate,  // Start date in yyyy-mm-dd format.
      thisMonthDynamicEndDate,  // End date in yyyy-mm-dd format.
      'ga:newUsers', // List of all metrics to retrieve.
      //'ga:Users
      {
        // Filter for Firefox browser users in the USA. See
        // https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters
        // for filter syntax, and
        // https://developers.google.com/analytics/devguides/reporting/core/dimsmets
        // for the list of supported Dimensions and Metrics.
        //'filters': 'ga:browser==Firefox;ga:country==United States'
      }
  );
    
    
    var returningUsers = Analytics.Data.Ga.get(
        'ga:' + profileId,
        thisMonthDynamicStartDate,  // Start date in yyyy-mm-dd format.
      thisMonthDynamicEndDate,  // End date in yyyy-mm-dd format.
        'ga:visitors', // List of all metrics to retrieve.
        //'ga:Users
      {
        // Filter for Firefox browser users in the USA. See
        // https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters
        // for filter syntax, and
        // https://developers.google.com/analytics/devguides/reporting/core/dimsmets
        // for the list of supported Dimensions and Metrics.
        //'filters': 'ga:browser==Firefox;ga:country==United States'
     }
    );
    
    var newVisitors = Analytics.Data.Ga.get(
        'ga:' + profileId,
        thisMonthDynamicStartDate,  // Start date in yyyy-mm-dd format.
      thisMonthDynamicEndDate,  // End date in yyyy-mm-dd format.
        'ga:newVisits', // List of all metrics to retrieve.
        //'ga:newUsers
      {
        // Filter for Firefox browser users in the USA. See
        // https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters
        // for filter syntax, and
        // https://developers.google.com/analytics/devguides/reporting/core/dimsmets
        // for the list of supported Dimensions and Metrics.
        //'filters': 'ga:browser==Firefox;ga:country==United States'
     }
    );   
    
    var totalVisitors =  returningUsers.rows[0][0]
    Logger.log('Total Visitors: %s', totalVisitors )
    
   	var newVisitors = newVisitors.rows[0][0]
   	Logger.log('New Visitors: %s', newVisitors)
    
     var returningVisitor = newVisitors / totalVisitors
    //Round returning visitor to two decimal places.
    return returningVisitor = roundFunction(returningVisitor)
  }
  
  
  
  
  
  function roundFunction(x) {
  		return parseFloat(x * 10).toFixed(2);
	}
    
    var returningVisitor2 = filterStats()
    
    
    
   
  
  function numberWithCommas(x) {
    	return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
	}
  
  
  
  
  
  
  //Send an email to Anthony
  	MailApp.sendEmail(
      							//!Sensitive
              				   //Recipient of email...
              				   'xxxx',
      						    //'dcutherell@bsi-eas.com',
              				   //Subject Field of email...
                    		   '30Day Rolling Report',
      
              				   //Body of email...
      						   
      						  //"2.DateRange: " +startDate+" - "+terminationDate+"\n"+
      "----------------AdWords----------------------"+
      "-------------------------------------------"+"\n"+
      						   "1.DateRange: "+recordedAdwordsStart.slice(1,5)+"\/"+recordedAdwordsStart.slice(5,7)+"\/"+recordedAdwordsStart.slice(6,8)+" - "+recordedAdwordsEnd.slice(1,5)+"\/"+recordedAdwordsEnd.slice(5,7)+"\/"+recordedAdwordsEnd.slice(6,8)+"\n"+
      						   "2.Days extracted: "+counter+"\n"+
							   "3.Clicks Per day: "+Math.round((stats.getClicks()/30))+"\n"+
      						   "4.Clicks:   "+numberWithCommas(stats.getClicks())+"\n"+
      						   "5.Impressions:   "+numberWithCommas(stats.getImpressions())+"\n"+
      						   "6.Cost: $"+numberWithCommas(stats.getCost())+"\n"+
      						   "7.WeekDAY CTR Average(30 Days Rolling)"+((weekdayClickCumm/weekdayImpCumm)*100).toFixed(2)+"%"+"\n"+"\n"+
      						   "8.WeekEND CTR Average(30 Days Rolling)"+((weekendClickCumm/weekendImpCumm)*100).toFixed(2)+"%"+"\n"+"\n"+"\n"+
      						   "9.General CTR Average(30 Days Rolling)"+cummCtr+"%"+"\n"+
      						   "10.Cart abandoment stats: SEE NETSUITE"+"\n"+"\n"+
        "----------------Analytics--------------------"+"\n"+
      "---------------------------------------------"+"\n"+
      						   "11.Date Range(30 days ago - yesterday)"+"\n"+
      						   "12.Returning Customer Percent: "+returningVisitor2.toString()+"% "+"\n"
    );
  
 
  
  
}
